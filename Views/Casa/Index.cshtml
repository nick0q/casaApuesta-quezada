@model pc1.Models.CasaCambioViewModel
@{
    ViewData["Title"] = "Casa de Cambio Online";
}

<style>
    
    .form-container { display: flex; flex-wrap: wrap; gap: 20px; }
    .form-section { flex: 1; min-width: 300px; border: 1px solid #ccc; padding: 20px; border-radius: 8px; background-color: #f9f9f9; }
    .form-section h3 { margin-top: 0; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 15px; }
    .form-group { margin-bottom: 1rem; }
    .form-control { display: block; width: 100%; padding: 0.375rem 0.75rem; font-size: 1rem; line-height: 1.5; color: #495057; background-color: #fff; background-clip: padding-box; border: 1px solid #ced4da; border-radius: 0.25rem; }
    .btn { display: inline-block; font-weight: 400; color: #212529; text-align: center; vertical-align: middle; cursor: pointer; user-select: none; background-color: transparent; border: 1px solid transparent; padding: 0.375rem 0.75rem; font-size: 1rem; line-height: 1.5; border-radius: 0.25rem; }
    .btn-primary { color: #fff; background-color: #007bff; border-color: #007bff; }
    .btn-success { color: #fff; background-color: #28a745; border-color: #28a745; margin-left: 10px; }
    .text-danger { color: #dc3545 !important; }
    .text-success { color: #198754 !important; }
    .result-display { margin-top: 15px; font-weight: bold; background-color: #e9ecef; padding: 10px; border-radius: 5px; }
    .validation-summary-errors ul { list-style-type: none; padding-left: 0; }
    .alert { padding: 1rem; margin-bottom: 1rem; border: 1px solid transparent; border-radius: .25rem; }
    .alert-danger { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
    .alert-success { color: #0f5132; background-color: #d1e7dd; border-color: #badbcc; }
    .field-validation-error { display: block; } 

</style>

<h1>@ViewData["Title"]</h1>
<p>Realice sus operaciones de cambio de forma rápida y segura.</p>
<hr />


@if (ViewData.ModelState.ErrorCount > 0 && ViewData.ModelState.Any(kvp => string.IsNullOrEmpty(kvp.Key) || kvp.Key.StartsWith("Usuario.")))
{
    <div class="alert alert-danger validation-summary-errors" role="alert">
         <span>Por favor corrija los siguientes errores:</span>
            <ul>
            @foreach (var key in ViewData.ModelState.Keys)
            {
                 if(string.IsNullOrEmpty(key) || key.StartsWith("Usuario.")) {
                    foreach (var error in ViewData.ModelState[key]?.Errors ?? Enumerable.Empty<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>())
                    {
                        if (!string.IsNullOrWhiteSpace(error.ErrorMessage))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    }
                 }
            }
            </ul>
    </div>
}

 
 @if (TempData["ErrorMessage"] != null)
 {
     <div class="alert alert-warning">@TempData["ErrorMessage"]</div>
 }
 


<form asp-controller="Casa" asp-action="Index" method="post">
    @Html.AntiForgeryToken()

    <div class="form-container">

       
        <div class="form-section">
            <h3>1. Tus Datos</h3>
            <div class="form-group">
                <label asp-for="Usuario.Nombre" class="control-label"></label>
                <input asp-for="Usuario.Nombre" class="form-control" />
                <span asp-validation-for="Usuario.Nombre" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Usuario.Correo" class="control-label"></label>
                <input asp-for="Usuario.Correo" class="form-control" type="email" />
                <span asp-validation-for="Usuario.Correo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Usuario.Dni" class="control-label">DNI</label>
                <input asp-for="Usuario.Dni" class="form-control" />
                <span asp-validation-for="Usuario.Dni" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Usuario.Telefono" class="control-label">Teléfono</label>
                <input asp-for="Usuario.Telefono" class="form-control" type="tel" />
                <span asp-validation-for="Usuario.Telefono" class="text-danger"></span>
            </div>
        </div>


      
        <div class="form-section">
            <h3>2. Operación de Cambio</h3>
            <div class="form-group">
                <label asp-for="Operacion.MonedaOrigen" class="control-label">Envías</label>
                <select asp-for="Operacion.MonedaOrigen" asp-items="@Model.Operacion.MonedasDisponibles" class="form-control">
                     
                </select>
                <span asp-validation-for="Operacion.MonedaOrigen" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Operacion.MontoEnviar" class="control-label">Monto a Enviar</label>
                <input asp-for="Operacion.MontoEnviar" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="Operacion.MontoEnviar" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Operacion.MonedaDestino" class="control-label">Recibes</label>
                <select asp-for="Operacion.MonedaDestino" asp-items="@Model.Operacion.MonedasDisponibles" class="form-control">
                    
                </select>
       
                <span asp-validation-for="Operacion.MonedaDestino" class="text-danger"></span>
                 @if (ViewData.ModelState.TryGetValue("Operacion.MonedaDestino", out var errorStateField) && errorStateField.Errors.Any())
                 {
                     <span class="text-danger field-validation-error">@errorStateField.Errors.First().ErrorMessage</span>
                 }
            </div>


            @if (Model.Operacion.MontoRecibir.HasValue && Model.Operacion.MontoRecibir > 0 &&
                 !(ViewData.ModelState.TryGetValue("Operacion.MonedaDestino", out var errorStateForResult) && errorStateForResult.Errors.Any()))
            {
                <div class="result-display">
                    Al enviar <strong>@Model.Operacion.MontoEnviar?.ToString("N2") @Model.Operacion.MonedaOrigen</strong>,
                    recibirás aprox.: <strong>@Model.Operacion.MontoRecibir.Value.ToString("N2") @Model.Operacion.MonedaDestino</strong>
                    <br />
                    <small>
                        Tipo de cambio aplicado:
                        1 @Model.Operacion.MonedaOrigen = @Model.Operacion.TipoCambioAplicado?.ToString("N6") @Model.Operacion.MonedaDestino
                    </small>
                </div>

                <input type="hidden" asp-for="Operacion.MontoRecibir" />
                <input type="hidden" asp-for="Operacion.TipoCambioAplicado" />
            }

            <div class="form-group mt-4 text-end">
                <button type="submit" name="actionButton" value="calcular" class="btn btn-primary">Hacer Cambio</button>
                <button type="submit" name="actionButton" value="completar" class="btn btn-success">Completar Operación</button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
      
        (function () {
            const origenSelect = document.getElementById('Operacion_MonedaOrigen');
            const destinoSelect = document.getElementById('Operacion_MonedaDestino');

            if (!origenSelect || !destinoSelect) return;

            function syncMonedas() {
                const origenVal = origenSelect.value;
                const destinoVal = destinoSelect.value;

                Array.from(destinoSelect.options).forEach(opt => {
                    opt.disabled = (opt.value === origenVal && opt.value !== "");
                });

                Array.from(origenSelect.options).forEach(opt => {
                    opt.disabled = (opt.value === destinoVal && opt.value !== "");
                });

                if (destinoSelect.options[destinoSelect.selectedIndex]?.disabled) {
                    destinoSelect.value = "";
                }
                if (origenSelect.options[origenSelect.selectedIndex]?.disabled) {
                    origenSelect.value = "";
                }
            }

            origenSelect.addEventListener('change', syncMonedas);
            destinoSelect.addEventListener('change', syncMonedas);
            syncMonedas(); 
        })();
    </script>
}